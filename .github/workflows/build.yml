name: Build a Dockerfile

on:
  workflow_call:
    inputs:
      dockerfile:
        description: 'Dockerfile path'
        required: true
        type: string
    rebuild:
      description: "Whether to rebuild the image if the source files have not changed"
      required: false
      default: "true"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        arch:
          - runner: ubuntu-latest
            platform: linux/amd64
            suffix: amd64
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
            suffix: arm64
    concurrency:
      group: ${{ inputs.dockerfile }}-${{ matrix.arch.suffix }}
      cancel-in-progress: false
    runs-on: ${{ matrix.arch.runner }}
    defaults:
      run:
        shell: bash -euo pipefail {0}
    steps:
      - name: Build & publish image
        uses: ZnqbuZ/Dockerfiles/.github/actions/build-image@ci
        with:
          dockerfile: ${{ inputs.dockerfile }}
          platform: ${{ matrix.arch.platform }}
          rebuild: ${{ inputs.rebuild }}
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

  update-manifest:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        shell: bash -euo pipefail {0}
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract image metadata
        id: meta
        uses: ZnqbuZ/Dockerfiles/.github/actions/parse-metadata@ci
        with:
          namespace: ${{ vars.DOCKERHUB_USERNAME }}
          dockerfile: ${{ inputs.dockerfile }}

      - name: Update manifest
        run: |
          declare -r SUFFIXES=("amd64" "arm64")
          
          IMAGE_NAME="${{ steps.meta.outputs.name }}"
          IMAGE_TAG="${{ steps.meta.outputs.tag }}"
          SHA_TAG="${{ github.sha }}"
          
          echo "::notice::Starting manifest update process for image: ${IMAGE_NAME}"
          for TAG in "${IMAGE_TAG}" "${SHA_TAG}"; do
            echo "::group::‚öôÔ∏è Processing manifest for tag: ${TAG}"

            declare -a AMEND_ARGS=()
            for SUFFIX in "${SUFFIXES[@]}"; do
              AMEND_ARGS+=("--amend" "${IMAGE_NAME}:${TAG}-${SUFFIX}")
            done

            echo "üö¢ Updating manifest: ${IMAGE_NAME}:${TAG}"
            docker manifest create "${IMAGE_NAME}:${TAG}" "${AMEND_ARGS[@]}"
            docker manifest push "${IMAGE_NAME}:${TAG}"

            echo "‚úÖ Success! Manifest pushed."
            echo "::endgroup::"
          done
