name: Build and push docker images

on:
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch:
  push:

jobs:
  get-dockerfiles:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -euo pipefail {0}
    outputs:
      list: ${{ steps.get-dockerfiles.outputs.list }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Dockerfiles to build
        id: get-dockerfiles
        run: |
          declare -a DOCKERFILE_DIRS=()

          if [[ "${{ github.event_name }}" == "push" ]]; then
            read -r -a DOCKERFILE_DIRS <<< "$(
              git diff --name-only "${{ github.event.before }}" "${{ github.sha }}" \
              | while read -r f; do
                  d=$(dirname "$f")
                  while [[ "$d" != "." ]]; do
                    [[ -f "$d/Dockerfile" ]] && echo "$d"
                    d=$(dirname "$d")
                  done
              done \
              | sort -u \
              | xargs
            )"
          else
            read -r -a DOCKERFILE_DIRS <<< "$(find . -name Dockerfile -exec dirname {} \; | sort -u | xargs)"
          fi

          declare -a DOCKERFILES=()

          for DIR in "${DOCKERFILE_DIRS[@]}"; do
            echo "Building Dockerfile in directory: $DIR"
            DOCKERFILES+=("${DIR}/Dockerfile")
          done

          if [[ ${#DOCKERFILES[@]} -eq 0 ]]; then
            echo "No Dockerfiles to build"
            echo "list=[]" >> $GITHUB_OUTPUT
          else
            printf -v DOCKERFILES_STR '%s\n' "${DOCKERFILES[@]}"
            DOCKERFILES_JSON=$(echo "$DOCKERFILES_STR" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "Dockerfiles to build: $DOCKERFILES_JSON"
            echo "list=$DOCKERFILES_JSON" >> $GITHUB_OUTPUT
          fi

  build:
    needs: get-dockerfiles
    if: ${{ needs.get-dockerfiles.outputs.list != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{ fromJson(needs.get-dockerfiles.outputs.list) }}
        arch:
          - runner: ubuntu-latest
            platform: linux/amd64
            suffix: amd64
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
            suffix: arm64
    concurrency:
      group: ${{ matrix.dockerfile }}-${{ matrix.arch.suffix }}
      cancel-in-progress: false
    runs-on: ${{ matrix.arch.runner }}
    defaults:
      run:
        shell: bash -euo pipefail {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract image metadata
        id: meta
        uses: ZnqbuZ/Dockerfiles/.github/actions/parse-metadata@main
        with:
          namespace: ${{ vars.DOCKERHUB_USERNAME }}
          path: ${{ matrix.dockerfile }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          file: ${{ matrix.dockerfile }}
          context: ${{ steps.meta.outputs.dir }}
          push: true
          platforms: ${{ matrix.arch.platform }}
          tags: |
            ${{ steps.meta.outputs.name }}:${{ steps.meta.outputs.tag }}-${{ matrix.arch.suffix }}
            ${{ steps.meta.outputs.name }}:${{ github.sha }}-${{ matrix.arch.suffix }}
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=${{ steps.meta.outputs.name }}
            org.opencontainers.image.description=Custom Docker image from ${{ matrix.dockerfile }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT

  update-manifest:
    runs-on: ubuntu-latest
    needs: [ get-dockerfiles, build ]
    if: ${{ always() && needs.get-dockerfiles.outputs.list != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{ fromJson(needs.get-dockerfiles.outputs.list) }}
    defaults:
      run:
        shell: bash -euo pipefail {0}
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract image metadata
        id: meta
        uses: ZnqbuZ/Dockerfiles/.github/actions/parse-metadata@main
        with:
          namespace: ${{ vars.DOCKERHUB_USERNAME }}
          path: ${{ matrix.dockerfile }}

      - name: Update manifest
        run: |
          declare -r SUFFIXES=("amd64" "arm64")
          
          IMAGE_NAME="${{ steps.meta.outputs.name }}"
          IMAGE_TAG="${{ steps.meta.outputs.tag }}"
          SHA_TAG="${{ github.sha }}"
          
          echo "::notice::Starting manifest update process for image: ${IMAGE_NAME}"
          for TAG in "${IMAGE_TAG}" "${SHA_TAG}"; do
            echo "::group::‚öôÔ∏è Processing manifest for tag: ${TAG}"

            declare -a AMEND_ARGS=()
            for SUFFIX in "${SUFFIXES[@]}"; do
              AMEND_ARGS+=("--amend" "${IMAGE_NAME}:${TAG}-${SUFFIX}")
            done

            echo "üö¢ Updating manifest: ${IMAGE_NAME}:${TAG}"
            docker manifest create "${IMAGE_NAME}:${TAG}" "${AMEND_ARGS[@]}"
            docker manifest push "${IMAGE_NAME}:${TAG}"

            echo "‚úÖ Success! Manifest pushed."
            echo "::endgroup::"
          done
