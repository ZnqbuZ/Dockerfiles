name: Publish Docker images

on:
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch:
    inputs:
      images:
        description: 'Space-separated list of images to build'
        required: false
        default: ''
      rebuild:
        description: "Whether to rebuild the image if the source files have not changed"
        required: false
        type: boolean
        default: false
  push:

jobs:
  get-dockerfiles:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -euxo pipefail {0}
    outputs:
      base: ${{ steps.get-dockerfiles.outputs.base }}
      list: ${{ steps.get-dockerfiles.outputs.list }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Dockerfiles to build
        id: get-dockerfiles
        run: |
          declare -a DOCKERFILE_DIRS=()

          while :; do
            if [[ "${{ github.event_name }}" == "push" ]]; then
              read -r -a DOCKERFILE_DIRS <<< "$(
                git diff --name-only "${{ github.event.before }}" "${{ github.sha }}" \
                | while read -r f; do
                    d=$(dirname "$f")
                    while [[ "$d" != "." ]]; do
                      [[ -f "$d/Dockerfile" ]] && echo "$d"
                      d=$(dirname "$d")
                    done
                done \
                | sort -u \
                | xargs
              )"
              break
            fi
            
            if [[ "${{ github.event.inputs.images }}" != "" ]]; then
              read -r -a DOCKERFILE_DIRS <<< "$(
                echo "${{ github.event.inputs.images }}" \
                | while read -r d; do
                    d="${d%/}"
                    [[ $d == ./* ]] || d="./$d"
                    echo "$d"
                done \
                | sort -u \
                | xargs
              )"
              break
            fi
          
            read -r -a DOCKERFILE_DIRS <<< "$(find . -name Dockerfile -exec dirname {} \; | sort -u | xargs)"
            break
          done
          
          NEED_BASE=$(printf '%s|' "./Base" "./Actions-Runner")
          NEED_BASE=${NEED_BASE%|}
          
          if printf '%s\n' "${DOCKERFILE_DIRS[@]}" | grep -E -xq "$NEED_BASE"; then
            echo "Found image depending on Base."
            echo "base=true" >> $GITHUB_OUTPUT
          fi

          declare -a DOCKERFILES=()

          for DIR in "${DOCKERFILE_DIRS[@]}"; do
            if [[ "$DIR" == "./Base" ]]; then
              continue
            fi
          
            DOCKERFILE="$DIR/Dockerfile"
            if [[ ! -f "$DOCKERFILE" ]]; then
              echo "Dockerfile not found in directory: $DIR"
              exit 1
            fi

            echo "Building Dockerfile in directory: $DIR"
            DOCKERFILES+=("${DOCKERFILE}")
          done

          if [[ ${#DOCKERFILES[@]} -eq 0 ]]; then
            echo "No Dockerfile to build"
            echo "list=[]" >> $GITHUB_OUTPUT
          else
            printf -v DOCKERFILES_STR '%s\n' "${DOCKERFILES[@]}"
            DOCKERFILES_JSON=$(echo "$DOCKERFILES_STR" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "Dockerfiles to build: $DOCKERFILES_JSON"
            echo "list=$DOCKERFILES_JSON" >> $GITHUB_OUTPUT
          fi

  build-base:
    needs: get-dockerfiles
    if: ${{ needs.get-dockerfiles.outputs.base == 'true' }}
    uses: ZnqbuZ/Dockerfiles/.github/workflows/build.yml@ci
    secrets: inherit
    with:
      dockerfile: "./Base/Dockerfile"
      rebuild: ${{ github.event.inputs.rebuild == true }}

  build:
    needs: [get-dockerfiles, build-base]
    if: |
      always()
      && (needs.get-dockerfiles.result == 'success' && needs.get-dockerfiles.outputs.list != '[]')
      && (needs.build-base.result == 'success' || needs.build-base.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{ fromJson(needs.get-dockerfiles.outputs.list) }}
    concurrency:
      group: ${{ matrix.dockerfile }}
      cancel-in-progress: false
    uses: ZnqbuZ/Dockerfiles/.github/workflows/build.yml@ci
    secrets: inherit
    with:
      dockerfile: ${{ matrix.dockerfile }}